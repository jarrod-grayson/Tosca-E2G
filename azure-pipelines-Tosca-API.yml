# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

stages:
- stage: Build
  displayName: Build
  jobs:
    - job: Build
      pool:
        name: Default
      steps:
      - script: echo Compile
        displayName: 'Preparation [GIT]'
      #- task: VSBuild@1
      #  inputs:
      #    solution: '$(solution)'
      #    msbuildArgs: >-
      #      /p:DeployOnBuild=true /p:WebPublishMethod=Package 
      #      /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true 
      #      /p:PackageLocation="$(build.artifactStagingDirectory)"
      #    platform: '$(buildPlatform)'
      #    configuration: '$(buildConfiguration)'

      #- task: VSTest@2
      #  inputs:
      #    platform: '$(buildPlatform)'
      #    configuration: '$(buildConfiguration)'

      #- task: CopyFiles@2
      #  inputs:
      #    SourceFolder: '$(build.sourcesdirectory)/PartsUnlimited-aspnet45/env/'
      #    Contents: '**/*.json'
      #    TargetFolder: '$(Build.ArtifactStagingDirectory)'

      #- task: PublishPipelineArtifact@1
      #  inputs:
      #    targetPath: '$(Build.ArtifactStagingDirectory)'
      #    artifact: 'drop'
      #    publishLocation: 'pipeline'  

      - script: echo Build Sample App
        displayName: 'Build [MAVEN]'

      - script: echo Unit Testing
        displayName: 'Code Analysis [SONAR]'

- stage: Deploy_App
  displayName: Deploy_App
  jobs:
    - job: Deploy_App
      pool:
        name: Default
      steps:
      - script: echo Environment
        displayName: 'Deployment [DOCKER]'

      - script: echo Application Deployment
        displayName: 'Staging'

- stage: Test
  displayName: Test
  jobs:
    - job: Test
      pool:
        name: Default
      steps:
      - script: echo Test
        displayName: 'Prepare Testing'

      - task: PowerShell@2
        inputs:
          filePath: $(System.DefaultWorkingDirectory)\tosca_execution_client.ps1
          arguments: >
            -toscaServerUrl "http://localhost:80"
            -projectName "common_repository"
            -eventsConfigFilePath "testEvents.json"
            -executionEnvironment "ElasticExecutionGrid"
            -importResults "true"
            -creator "ToscaExecutionClient ADO Pipeline"
            -resultsFileName "results.xml"
            -resultsFolderPath "C:/temp/results"
            -debug "true"
        displayName: 'Execute Tosca Elastic Execution Grid Event(s) via ToscaExecutionClient and Upload Results to qTest'
  
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $inputPath = "C:\temp\results\results.xml"
            $outputPath = "C:\temp\results\results_encode.xml"

            if (Test-Path $inputPath) {
                # Read as raw bytes
                $bytes = [System.IO.File]::ReadAllBytes($inputPath)

                # Check if first three bytes match a BOM
                if ($bytes.Length -ge 3 -and $bytes[0] -eq 0xEF -and $bytes[1] -eq 0xBB -and $bytes[2] -eq 0xBF) {
                    Write-Host "Detected UTF-8 BOM, removing..."
                    $bytes = $bytes[3..$bytes.Length]  # Strip BOM
                }

                # Convert bytes to string using UTF-8 decoding
                $content = [System.Text.Encoding]::UTF8.GetString($bytes)

                # Remove any hidden special characters (like your unexpected 195, 175, 194)
                $content = $content -replace "[^\u0000-\u007F]+", ""  # Removes non-ASCII hidden characters

                # Force write using UTF-8 without BOM
                $utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($false)
                [System.IO.File]::WriteAllText($outputPath, $content, $utf8NoBomEncoding)

                Write-Host "File successfully cleaned and saved!"
            } else {
                Write-Host "Input file not found!"
            }
        displayName: 'Clean Results XML File'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFiles: 'C:\temp\results\results_encode.xml'

      - script: |
          python C:\temp\results\parse_results.py
        displayName: 'Parse Test Results & Store in SQLite DB'
        continueOnError: true  # Prevents the pipeline from failing if the script errors out

- stage: Deploy_to_Staging
  displayName: Deploy_to_Staging
  jobs:
    - job: Deploy_to_Staging
      pool:
        name: Default
      steps:
      - script: echo Publish Artifacts
        displayName: 'Publish Artifact drop'
